import os
from __main__ import vtk, qt, ctk, slicer
import EditorLib
from EditorLib.EditOptions import HelpButton
from EditorLib.EditOptions import EditOptions
from EditorLib import EditUtil
from EditorLib import LabelEffect

# Added libs
from EditorLib import Effect
from EditorLib import LabelEffectLogic

from copy import copy, deepcopy
import numpy as np
#
# The Editor Extension itself.
#
# This needs to define the hooks to be come an editor effect.
#

#
# QuickTCGAEffectOptions - see LabelEffect, EditOptions and Effect for superclasses
#

class QuickTCGAEffectOptions(EditorLib.LabelEffectOptions):
  """ QuickTCGAEffect-specfic gui
  """

  def __init__(self, parent=0):
    super(QuickTCGAEffectOptions,self).__init__(parent)

    editUtil = EditorLib.EditUtil.EditUtil()
    parameterNode = editUtil.getParameterNode()
    lm = slicer.app.layoutManager()
    self.redSliceWidget = lm.sliceWidget('Red')
    self.yellowSliceWidget = lm.sliceWidget('Yellow')
    self.greenSliceWidget = lm.sliceWidget('Green')
    self.parameterNode=parameterNode
    
    self.attributes = ('MouseTool')
    self.displayName = 'QuickTCGAEffect Effect'

  def __del__(self):
    super(QuickTCGAEffectOptions,self).__del__()

  def create(self):
    super(QuickTCGAEffectOptions,self).create()
    self.helpLabel = qt.QLabel("Run the Quick TCGA Segmenter on the current label/seed image.", self.frame)
    self.frame.layout().addWidget(self.helpLabel)
    
    #create a "Start Bot" button
    self.botButton = qt.QPushButton(self.frame)

    self.frame.layout().addWidget(self.botButton)
    self.botButton.connect('clicked()', self.onStartBot)

    self.locRadFrame = qt.QFrame(self.frame)
    self.locRadFrame.setLayout(qt.QHBoxLayout())
    self.frame.layout().addWidget(self.locRadFrame)
    self.widgets.append(self.locRadFrame)

    HelpButton(self.frame, "TO USE: \n Start the Fast GrowCut segmenter and initialize the segmentation with any other editor tool. \n KEYS: \n Press the following keys to interact: \n G: start Fast GrowCut \n S: toggle between seed image and segmentation result \n R: reset fast GrowCut \n" )
    self.frame.layout().addStretch(1) # Add vertical spacer
    
    if hasattr(slicer.modules, 'TCGAEditorBot'):
	  slicer.util.showStatusMessage(slicer.modules.TCGAEditorBot.logic.currentMessage)
	  self.botButton.text = "Stop Quick TCGA Segmenter"
	  if self.locRadFrame:
		self.locRadFrame.hide()
    else:
	  self.botButton.text = "Start Quick TCGA Segmenter"
	  if self.locRadFrame:
		self.locRadFrame.show()

  def destroy(self):
    self.currentMessage = ""
    slicer.util.showStatusMessage(self.currentMessage)
    super(QuickTCGAEffectOptions,self).destroy()

  # note: this method needs to be implemented exactly as-is
  # in each leaf subclass so that "self" in the observer
  # is of the correct type
  def updateParameterNode(self, caller, event):
    node = EditUtil.EditUtil().getParameterNode()
    if node != self.parameterNode:
      if self.parameterNode:
        node.RemoveObserver(self.parameterNodeTag)
      self.parameterNode = node
      self.parameterNodeTag = node.AddObserver(vtk.vtkCommand.ModifiedEvent, self.updateGUIFromMRML)

  def setMRMLDefaults(self):
    super(QuickTCGAEffectOptions,self).setMRMLDefaults()

  def onStartBot(self):

    """Stop Quick TCGA bot to avoid conflicts"""
    if hasattr(slicer.modules, 'editorBot'):
      slicer.modules.editorBot.stop()
      del(slicer.modules.editorBot)
      
    """create the bot for background editing"""      
    if hasattr(slicer.modules, 'TCGAEditorBot'):
      slicer.modules.TCGAEditorBot.stop()
      del(slicer.modules.TCGAEditorBot)
      if self.botButton:
        self.botButton.text = "Start Quick TCGA Segmenter"   
        slicer.util.showStatusMessage("TCGA Segmenter: stopped")     
      if self.locRadFrame:
        self.locRadFrame.show()
    else:
      TCGASegBot(self)
      slicer.modules.TCGAEditorBot.logic.emergencyStopFunc = self.botEstop; #save the function that stops bot, destroys FastGrowCut segmenter, if things go wrong
      if self.botButton:
        self.botButton.text = "Stop Quick TCGA Segmenter"  
        self.currentMessage =  "Quick TCGA Segmenter started: go to PaintEffect to edit label image."
        slicer.util.showStatusMessage(self.currentMessage)        
        
      if self.locRadFrame:
        self.locRadFrame.hide()

  def updateGUIFromMRML(self,caller,event):
    self.disconnectWidgets()
    super(QuickTCGAEffectOptions,self).updateGUIFromMRML(caller,event)
    self.connectWidgets()

  def updateMRMLFromGUI(self):
    if self.updatingGUI:
      return
    disableState = self.parameterNode.GetDisableModifiedEvent()
    self.parameterNode.SetDisableModifiedEvent(1)
    super(QuickTCGAEffectOptions,self).updateMRMLFromGUI()
    self.parameterNode.SetDisableModifiedEvent(disableState)
    if not disableState:
      self.parameterNode.InvokePendingModifiedEvent()


  def botEstop(self):
    if hasattr(slicer.modules, 'TCGAEditorBot'):
      slicer.modules.TCGAEditorBot.stop()
      del(slicer.modules.TCGAEditorBot)
      if self.botButton:
        self.botButton.text = "Start Quick TCGA Segmenter"
      if self.locRadFrame:
        self.locRadFrame.show()
        
class TCGASegBot(object): #stays active even when running the other editor effects
  """
Task to run in the background for this effect.
Receives a reference to the currently active options
so it can access tools if needed.
"""
  def __init__(self,options):
    self.editUtil = EditUtil.EditUtil()
    #self.sliceWidget = options.tools[0].sliceWidget
    self.sliceWidget = slicer.app.layoutManager().sliceWidget('Red')
    if hasattr(slicer.modules, 'TCGAEditorBot'):
      slicer.modules.TCGAEditorBot.active = False
      del(slicer.modules.TCGAEditorBot)
    slicer.modules.TCGAEditorBot = self

    self.redSliceWidget=options.redSliceWidget
    self.greenSliceWidget=options.greenSliceWidget
    self.yellowSliceWidget=options.yellowSliceWidget
    self.start()

  def start(self):
    sliceLogic = self.sliceWidget.sliceLogic()
    self.logic = QuickTCGAEffectLogic( self.redSliceWidget.sliceLogic() )

  def stop(self):

    self.logic.destroy()
#
# QuickTCGAEffectTool
#

class QuickTCGAEffectTool(LabelEffect.LabelEffectTool):
  """
  One instance of this will be created per-view when the effect
  is selected.  It is responsible for implementing feedback and
  label map changes in response to user input.
  This class observes the editor parameter node to configure itself
  and queries the current view for background and label volume
  nodes to operate on.
  """

  def __init__(self, sliceWidget):
    super(QuickTCGAEffectTool,self).__init__(sliceWidget)
    # create a logic instance to do the non-gui work
    #self.logic = QuickTCGAEffectLogic(self.sliceWidget.sliceLogic())

  def cleanup(self):
    super(QuickTCGAEffectTool,self).cleanup()

  def processEvent(self, caller=None, event=None):
    """
    handle events from the render window interactor
    """

    # let the superclass deal with the event if it wants to
    if super(QuickTCGAEffectTool,self).processEvent(caller,event):
      return

    # events from the slice node
    if caller and caller.IsA('vtkMRMLSliceNode'):
      # here you can respond to pan/zoom or other changes
      # to the view
      pass


#
# QuickTCGAEffectLogic
#

class QuickTCGAEffectLogic(LabelEffect.LabelEffectLogic):
  """
  This class contains helper methods for a given effect
  type.  It can be instanced as needed by an QuickTCGAEffectTool
  or QuickTCGAEffectOptions instance in order to compute intermediate
  results (say, for user feedback) or to implement the final
  segmentation editing operation.  This class is split
  from the QuickTCGAEffectTool so that the operations can be used
  by other code without the need for a view context.
  """

  def __init__(self,sliceLogic):
    print("Preparing Quick TCGA Interaction")
    self.attributes = ('MouseTool')
    self.displayName = 'QuickTCGA Effect'

    #disconnect all shortcuts that may exist, to allow QuickTCGA's to work, reconnect once bot is turned off
    slicer.modules.EditorWidget.removeShortcutKeys()
    self.sliceLogic = sliceLogic
    self.editUtil = EditUtil.EditUtil()
    self.swRed = slicer.app.layoutManager().sliceWidget('Red').sliceLogic()

    #initialize Fast GrowCut
    self.init_QuickTCGA()
    
    self.QuickTCGACreated=False
  
  def init_QuickTCGA(self):
	
	self.emergencyStopFunc = None    
	self.dialogBox=qt.QMessageBox() #will display messages to draw users attention if he does anything wrong
	self.dialogBox.setWindowTitle("QuickTCGA Error")
	self.dialogBox.setWindowModality(qt.Qt.NonModal) #will allow user to continue interacting with Slicer
    
    # TODO: check this claim- might be causing leaks
    # set the image, label nodes (this will not change although the user can
    # alter what is bgrnd/frgrnd in editor)
    # Confused about how info propagates UIarray to UIVol, not the other way, NEEDS AUTO TESTS
	self.labelNode = self.editUtil.getLabelVolume() #labelLogic.GetVolumeNode()
	self.backgroundNode = self.editUtil.getBackgroundVolume() #backgroundLogic.GetVolumeNode()
	self.foregroundNode = self.swRed.GetForegroundLayer().GetVolumeNode()
    
    #perform safety check on right images/labels being selected, #set up images
    #if red slice doesnt have a label or image, go no further
	if type(self.backgroundNode)==type(None) or type(self.labelNode)==type(None):
		self.dialogBox.setText("Either Image (must be Background Image) or Label not set in slice views.")
		self.dialogBox.show()
       
		if self.emergencyStopFunc:
			self.emergencyStopFunc()
		return
       
	volumesLogic = slicer.modules.volumes.logic()
    
	self.labelName = self.labelNode.GetName() # record name of label so user, cant trick us    
	self.imgBgrdName = self.backgroundNode.GetName()
	self.imgFgrdName = self.foregroundNode.GetName()
    
	if self.sliceViewMatchEditor(self.sliceLogic)==False: # do nothing, exit function if user has played with images
		if self.emergencyStopFunc:
			self.emergencyStopFunc()
		return
         
    # QuickTCGA shortcuts
	resetQTCGAKey = qt.QKeySequence(qt.Qt.Key_R) # reset initialization flag
	runQTCGAClusterKey = qt.QKeySequence(qt.Qt.Key_S) # run fast growcut
	editTCGAKey = qt.QKeySequence(qt.Qt.Key_E) # edit seed labels
	runQTCGATemplateKey = qt.QKeySequence(qt.Qt.Key_T)

	print " keys to run QuickTCGA segmentation, template matching, edit seed, reset parameters are C, T, E, R"
    
	self.qtkeyconnections = []
	self.qtkeydefsQTCGA = [[resetQTCGAKey, self.resetQTCGAFlag],
                             [runQTCGAClusterKey,self.runQTCGA_Segmentation],
                             [runQTCGATemplateKey, self.runQTCGA_Template],
                             [editTCGAKey, self.editTCGA]]

	for keydef in self.qtkeydefsQTCGA:
		s = qt.QShortcut(keydef[0], slicer.util.mainWindow()) # connect this qt event to mainWindow focus
        #s.setContext(1)
		s.connect('activated()', keydef[1])
        #s.connect('activatedAmbiguously()', keydef[1])
		self.qtkeyconnections.append(s)
    
	self.qTCGALabMod_tag = self.sliceLogic.AddObserver("ModifiedEvent", self.QTCGAChangeLabelInput) # put test listener on the whole window  
   
    # Quick TCGA parameters
	self.bEditTCGA = True
	self.currentMessage = ""
    
	seedArray = slicer.util.array(self.labelName)
	self.qTCGASeedArray = seedArray.copy()
	self.qTCGASegArray = seedArray.copy()
	self.qTCGASeedArray[:] = 0
	self.qTCGASegArray[:] = 0
    
	import vtkSlicerQuickTCGAModuleLogicPython

	qTCGAMod =vtkSlicerQuickTCGAModuleLogicPython.vtkQuickTCGA()
	qTCGAMod.SetSourceVol(self.foregroundNode.GetImageData())
	#qTCGAMod.SetSeedVol(self.labelNode.GetImageData())
	qTCGAMod.Initialization()
	self.qTCGAMod = qTCGAMod   
	self.QuickTCGACreated=True #tracks if completed the initializtion (so can do stop correctly) of KSlice

 

  # run Quick TCGA segmenter for the current master volume and label volume
  
  def runQTCGA_Segmentation(self):
	if self.bEditTCGA == True:

		self.currentMessage = "Quick TCGA: running classification ..."
		slicer.util.showStatusMessage(self.currentMessage)
		seedArray = slicer.util.array(self.labelNode.GetName())
		self.qTCGASeedArray[:]  = seedArray[:]
		
		self.qTCGAMod.SetSourceVol(self.foregroundNode.GetImageData())
		self.qTCGAMod.SetSeedVol(self.labelNode.GetImageData())
		self.qTCGAMod.Run_QTCGA_Segmentation()
		self.qTCGASegArray[:] = seedArray[:]
		
		self.labelNode.GetImageData().Modified()
		self.labelNode.Modified()
			
		self.bEditTCGA = False
		
		self.currentMessage = "Quick TCGA done: press 'E' to add more prior information, or 'R' to reset Quick TCGA parameters"
		slicer.util.showStatusMessage(self.currentMessage)
	else:
		self.currentMessage = "Quick TCGA: go to seed labels first by pressing 'E'"
		slicer.util.showStatusMessage(self.currentMessage)

  def runQTCGA_Template(self):
	if self.bEditTCGA == True:

		self.currentMessage = "Quick TCGA: running template matching ..."
		slicer.util.showStatusMessage(self.currentMessage)
		seedArray = slicer.util.array(self.labelNode.GetName())
		self.qTCGASeedArray[:]  = seedArray[:]
		
		self.qTCGAMod.SetSourceVol(self.foregroundNode.GetImageData())
		self.qTCGAMod.SetSeedVol(self.labelNode.GetImageData())
		#self.qTCGAMod.SetInitializationFlag(bGCInitialized)
		self.qTCGAMod.Run_QTCGA_Template()
		self.qTCGASegArray[:] = seedArray[:]
		
		self.labelNode.GetImageData().Modified()
		self.labelNode.Modified()
			
		self.bEditTCGA = False
		
		self.currentMessage = "Quick TCGA done: press 'E' to add more prior information, or 'R' to reset Quick TCGA parameters"
		slicer.util.showStatusMessage(self.currentMessage)
	else:
		self.currentMessage = "Quick TCGA: go to seed labels first by pressing 'E'"
		slicer.util.showStatusMessage(self.currentMessage)
  
  # reset Quick TCGA
  def resetQTCGAFlag(self):
        self.bEditTCGA = True
        self.qTCGASeedArray[:] = 0
        self.qTCGASegArray[:] = 0
        
        seedArray = slicer.util.array(self.labelNode.GetName())
        seedArray[:] = 0
        
        self.labelNode.GetImageData().Modified()
        self.labelNode.Modified()
        print('reset Quick TCGA parameters')
        self.currentMessage = "Quick TCGA: parameters have been reset. Go to PaintEffect to initialize labels and press 'C' to run Quick TCGA"
        slicer.util.showStatusMessage(self.currentMessage)
        
        
  def editTCGA(self):
	
    seedArray = slicer.util.array(self.labelNode.GetName())
    if self.bEditTCGA == False:
        self.qTCGASegArray[:] = seedArray[:]
        seedArray[:] = self.qTCGASeedArray[:]
        self.bEditTCGA = True
        self.labelNode.GetImageData().Modified()
        self.labelNode.Modified()
		
        print('show seed image')
        self.currentMessage = "Quick TCGA: seed image is shown. Press 'E' to segmentation result; Or go to PaintEffect to refine labels if necessary, and press 'C' or 'T' to run Quick TCGA"
        slicer.util.showStatusMessage(self.currentMessage)
    else:
        if self.qTCGASegArray.any() != 0 :
		
			seedArray[:] = self.qTCGASegArray[:]
			self.bEditTCGA = False
			self.labelNode.GetImageData().Modified()
			self.labelNode.Modified()
			
			print('show segmentation')
			self.currentMessage = "Quick TCGA: segmentation result is shown. If not satisfied, press 'E' to edit seeds and run Quick TCGA again"
			slicer.util.showStatusMessage(self.currentMessage)
        else:
			print('no segmentation result')	
			self.currentMessage = "Quick TCGA:: no segmentation result available"
			slicer.util.showStatusMessage(self.currentMessage)
			
  def destroy(self):
    #destroy GrowCut key shortcuts
    for i in range(len(self.qtkeydefsQTCGA)):  #this will be an empty list if the KSlice part has been reached (all growcut functionality disabled)
        keyfun = self.qtkeydefsQTCGA[i]
        keydef = self.qtkeyconnections[i]
        test1=keydef.disconnect('activated()', keyfun[1])
        test2=keydef.disconnect('activatedAmbiguously()', keyfun[1])
        #self.qtkeyconnections.remove(keydef) #remove from list
        keydef.setParent(None)
        #why is this necessary for full disconnect (if removed, get the error that more and more keypresses are required if module is repetedly erased and created
        keydef.delete() #this causes errors   
    
    # destroy GrowCut objects
    self.qTCGASeedArray = None
    self.qTCGASegArray = None
    self.qTCGAMod = None
    self.currentMessage = ""
    self.imgName = None
    self.imgBgrdName = None
    self.imgFgrdName = None
    self.labelNode = None
    self.backgroundNode = None
    
    # remove GrowCut observer
    self.sliceLogic.RemoveObserver(self.qTCGALabMod_tag)

    #put back the editor shortcuts we removed
    slicer.modules.EditorWidget.installShortcutKeys()

    print("Deletion completed")

   
  def sliceViewMatchEditor(self, sliceLogic):
    #if self.dialogBox==type(None): #something deleted teh dialogBox, this function then breaks, bail
    # if self.emergencyStopFunc:
    # self.emergencyStopFunc()
    # return False
    
    imgNode = sliceLogic.GetBackgroundLayer().GetVolumeNode()
    labelNode = sliceLogic.GetLabelLayer().GetVolumeNode()

    if type(imgNode)==type(None) or type(labelNode)==type(None) :
        self.dialogBox.setText("Either image (must be Background Image) or label not set in slice views.")
        self.dialogBox.show()
        if self.emergencyStopFunc:
            self.emergencyStopFunc()
        return False

    dimImg=self.backgroundNode.GetImageData().GetDimensions()
    dimLab=self.labelNode.GetImageData().GetDimensions()
    #~ dimImg=imgNode.GetImageData().GetDimensions()
    #~ dimLab=labelNode.GetImageData().GetDimensions()

    if not (dimImg[0]==dimLab[0] and dimImg[1]==dimLab[1] and dimImg[2]==dimLab[2]): #if sizes dont match up(doing this b/c cant reach HelperBox parameters
        self.dialogBox.setText("Mismatched label to image.")
        self.dialogBox.show()
        if self.emergencyStopFunc:
            self.emergencyStopFunc()
        return False

    if (self.imgBgrdName== imgNode.GetName()) and (self.labelName == labelNode.GetName()):
        return True
    else:
        self.dialogBox.setText("Set image to values used for starting the FastGrowCut bot or stop bot.")
        self.dialogBox.show()
        if self.emergencyStopFunc:
            self.emergencyStopFunc()
        return False

  def QTCGAChangeLabelInput(self, caller, event):
    
    if self.sliceViewMatchEditor(self.sliceLogic)==False:
       return #do nothing, exit function
#
# The QuickTCGAEffect class definition
#

class QuickTCGAEffectExtension(LabelEffect.LabelEffect):
  """Organizes the Options, Tool, and Logic classes into a single instance
  that can be managed by the EditBox
  """

  def __init__(self):
    # name is used to define the name of the icon image resource (e.g. QuickTCGAEffect.png)
    self.name = "QuickTCGAEffect"
    # tool tip is displayed on mouse hover
    self.toolTip = "Paint: circular paint brush for label map editing"

    self.options = QuickTCGAEffectOptions
    self.tool = QuickTCGAEffectTool
    self.logic = QuickTCGAEffectLogic

""" Test:

sw = slicer.app.layoutManager().sliceWidget('Red')
import EditorLib
pet = EditorLib.QuickTCGAEffectTool(sw)

"""

#
# QuickTCGAEffect
#

class QuickTCGAEffect:
  """
  This class is the 'hook' for slicer to detect and recognize the extension
  as a loadable scripted module
  """
  def __init__(self, parent):
    parent.dependencies = ["Editor"]
    parent.title = "Editor QuickTCGAEffect Effect"
    parent.categories = ["Developer Tools.Editor Extensions"]
    parent.contributors = ["Liangjia Zhu, Yi Gao, Joel Saltz, Allen Tannenbaum (Stony Brook University)"] # insert your name in the list
    parent.helpText = """Interactive TCGA editor extension."""
    parent.acknowledgementText = """ This editor extension was developed by Liangjia Zhu, Yi Gao, Joel Saltz, and Allen Tannenbaum (Stony Brook University) """


    # TODO:
    # don't show this module - it only appears in the Editor module
    #parent.hidden = True

    # Add this extension to the editor's list for discovery when the module
    # is created.  Since this module may be discovered before the Editor itself,
    # create the list if it doesn't already exist.
    try:
      slicer.modules.editorExtensions
    except AttributeError:
      slicer.modules.editorExtensions = {}
    slicer.modules.editorExtensions['QuickTCGAEffect'] = QuickTCGAEffectExtension

#
# QuickTCGAEffectWidget
#

class QuickTCGAEffectWidget:
  def __init__(self, parent = None):
    self.parent = parent

  def setup(self):
    # don't display anything for this widget - it will be hidden anyway
    pass

  def enter(self):
    pass

  def exit(self):
    pass


